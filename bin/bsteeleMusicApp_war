#!/bin/tcsh
#set echo; set verbose

echo $0\:

#	set default version code from today's date
set versionCode=`date +%Y%m%d`
set historicalCode=$versionCode

set flut=bsteele_music_flutter
set rel=bsteeleMusicRelease
set lib=bsteeleMusicLib
set server=~/github/bsteeleMusicServer
#	war: web archive.  from java since the server is java
set warName=bsteeleMusicApp
set war=$warName.war

#	allow for historical version codes
while ( $#argv > 1 )
	switch ( $1 )
	case '-vc':	#	use a prior existing version code and tag
		shift
	    set historicalCode=$1
		shift
		continue;
	default:
		breaksw;
	endsw
	break;
end

#	notice the v in front of the date number
set tag=v$versionCode


cd ~/github/$flut
if ( $status != 0 ) exit $status

#	generate remote tag if required
#	otherwise we'll assume it already exists
if ( $historicalCode == $versionCode ) then

	cd ~/github/$flut
	if ( $status != 0 ) exit $status
	git tag -d $tag
	git push --delete origin $tag
	date --utc +%Y%m%d_%H%M%S > lib/assets/utcDate.txt #	update for the commit, may not match the version code exactly
	git commit -a -m "commit for war $tag"
	git tag -a $tag -m "tag: $tag"
	git tag | tail -3
	git remote set-url origin git@github.com:pearlbob/$flut.git
	git push
	git push origin $tag
	git show --name-status | head -1

	cd ~/github/$lib
	if ( $status != 0 ) exit $status
	git tag -d $tag
	git push --delete origin $tag
	git commit -a -m "commit for war $tag"
	git tag -a $tag -m "tag: $tag"
	git tag | tail -3
	git remote set-url origin git@github.com:pearlbob/$lib.git
	git push
	git push origin $tag
	git show --name-status | head -1
endif

#	move to temporary work area
set tmp=~/junk
cd $tmp

#	assure rebuild is from scratch
rm -rf $rel
mkdir $rel
cd $rel

#	get the tagged release version and its corresponding lib
echo get source
git -c advice.detachedHead=false clone --depth 1 --branch $tag git@github.com:pearlbob/$lib.git
if ( $status != 0 ) exit $status
git -c advice.detachedHead=false clone --depth 1 --branch $tag git@github.com:pearlbob/$flut.git
if ( $status != 0 ) exit $status


#	build the flutter web release from source and lib
echo build
cd $flut
flutter clean
#	adjust the version code in the pubspec.yaml file
sed -i -e "s/^version: *\([0-9]*\.[0-9]*\.[0-9]*\).*/version: \1+$versionCode/;" pubspec.yaml 
if ( $status != 0 ) exit $status
#	record the build date
date --utc +%Y%m%d_%H%M%S > lib/assets/utcDate.txt
#   canvaskit fixes rendering errors, included in app for the park
flutter build web --release --base-href /$warName/
if ( $status != 0 ) exit $status
bsteeleMusicApp_canvaskit # offline canvas kit update

#	deploy locally the release_notes page
bin/bsteeleMusicApp_release_notes
if ( $status != 0 ) exit -1

#	build the server war file
echo build server
cd $server
mvn package

cd $tmp/$rel/$flut

#	add the app to the server war file
cp $server/target/$war .
jar -uf $war -C build/web .

#	update the local allSongs to the latest
jar -uf $war -C ~/github/allSongs.songlyrics allSongs.songlyrics
jar -uf $war -C ~/github/allSongs.songlyrics allSongs.songmetadata
jar -uf $war -C ~/github/allSongs.songlyrics allSongPerformances.songperformances

set dst=~/lib/${warName}_$tag.war
mv $war $dst

cd $tmp
rm -rf $rel

echo $dst
echo use ~/lib/bsteeleMusicAppWarLocalInstall for local install

exit 0
